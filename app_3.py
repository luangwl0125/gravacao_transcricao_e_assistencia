import sys, audioop
sys.modules['pyaudioop'] = audioop

from pathlib import Path
from datetime import datetime
import time
import queue
import tempfile
import os
import streamlit as st
from streamlit_webrtc import WebRtcMode, webrtc_streamer

import openai
import pydub
from moviepy.video.io.VideoFileClip import VideoFileClip
from dotenv import load_dotenv, find_dotenv
from openai import RateLimitError

_ = load_dotenv(find_dotenv())

# --- PROMPTS ---
PROMPT_PSICOLOGICO = ''' 
Voc√™ √© um Psic√≥logo/Neuropsic√≥logo Assistente com mais de 30 anos de experi√™ncia no Brasil, atuando diretamente como suporte t√©cnico de LUAN GAMA WANDERLEY LEITE (CRP-15/3328), Psic√≥logo e Assessor T√©cnico da Defensoria P√∫blica do Estado de Alagoas (Mat. 9864616-8).

Sua tarefa √© analisar as informa√ß√µes registradas a seguir, delimitadas por #### DADOS ####, e produzir uma **estrutura de avalia√ß√£o psicol√≥gica inicial**, de acordo com os par√¢metros √©tico-profissionais, com base cient√≠fica e 100% conforme as resolu√ß√µes do CFP.

Siga estritamente as seguintes se√ß√µes e orienta√ß√µes:

üîç **1. IDENTIFICA√á√ÉO DA DEMANDA**  
- Especifique a origem da demanda: espont√¢nea, judicial, institucional ou encaminhamento.  
- Avalie a urg√™ncia e a natureza principal da demanda (psicol√≥gica, psiqui√°trica, social, jur√≠dica).  

üìã **2. REGISTRO E DOCUMENTA√á√ÉO**  
- Realize anamnese com dados sociodemogr√°ficos, hist√≥ria cl√≠nica, familiar, social, educacional e laboral.  
- Registre de forma √©tica e sigilosa, conforme as Resolu√ß√µes CFP n¬∫ 01/2009 e n¬∫ 06/2019.  
- Utilize instrumentos estruturados e entrevistas cl√≠nicas conforme a Resolu√ß√£o CFP n¬∫ 31/2022.  

üß† **3. OBSERVA√á√ÉO PSICOL√ìGICA E IMPRESS√ïES CL√çNICAS INICIAIS**  
- Descreva o estado mental, o comportamento observado e o modo de comunica√ß√£o do assistido.  
- Registre indicadores de sofrimento ps√≠quico, risco psicossocial, sinais de viol√™ncia ou idea√ß√£o suicida.  

üßæ **4. PLANO INICIAL DE A√á√ÉO**  
- Indique se haver√° continuidade do acompanhamento na DPE ou necessidade de encaminhamento (CAPS, CRAS, UBS etc.).  
- Avalie a necessidade de elabora√ß√£o de documentos (relat√≥rio, laudo, parecer) ou aprofundamento diagn√≥stico.  

üßë‚Äç‚öñÔ∏è **5. CONTEXTO JUR√çDICO E ARTICULA√á√ÉO INTERSETORIAL**  
- Verifique a exist√™ncia de v√≠nculo com processos jur√≠dicos e, se aplic√°vel, a articula√ß√£o com defensores(as).  
- Projete a produ√ß√£o de documentos que possam subsidiar decis√µes judiciais.  

ü§ù **6. CONSENTIMENTO E ORIENTA√á√ïES √âTICAS**  
- Confirme que foram explicadas as regras de sigilo, os limites da atua√ß√£o na DPE e os usos das informa√ß√µes.  
- Verifique e registre a obten√ß√£o de Termo de Consentimento Informado, se aplic√°vel.  

üìå **7. HIP√ìTESES DIAGN√ìSTICAS INICIAIS E ENCAMINHAMENTOS**  
- Apresente hip√≥teses diagn√≥sticas preliminares com base nos dados e instrumentos dispon√≠veis.  
- Estruture um Termo de Encaminhamento interno ou externo, se pertinente.

**Diretrizes complementares:**
- Utilize linguagem t√©cnica e clara, evitando infer√™ncias n√£o fundamentadas.  
- Mantenha fidelidade aos dados. Caso algo n√£o tenha sido informado, sinalize como "n√£o identificado".  
- Fundamente suas observa√ß√µes na literatura e nas normas do CFP.

O conte√∫do a ser analisado est√° entre os delimitadores:

#### DADOS ####
{}
#### DADOS ####
'''

PROMPT_JURIDICO = ''' 
Voc√™ √© um Defensor P√∫blico Supervisor e sua tarefa √© analisar tecnicamente a transcri√ß√£o de um atendimento jur√≠dico prestado no N√∫cleo de Atendimento a Idosos da Defensoria P√∫blica do Estado de Alagoas.

Sua an√°lise servir√° de base para orienta√ß√£o e forma√ß√£o dos estagi√°rios envolvidos. Utilize linguagem t√©cnica e formal, rigorosamente jur√≠dica, e estruture a resposta conforme os t√≥picos indicados abaixo.

Diretrizes:

1. Evite infer√™ncias n√£o sustentadas nos fatos relatados. Se houver lacunas, registre como "n√£o informado" ou "n√£o identificado".
2. Respeite o sigilo e a √©tica profissional; n√£o inclua ju√≠zos de valor ou suposi√ß√µes pessoais.
3. Utilize o conte√∫do delimitado por #### TRANSCRI√á√ÉO #### como √∫nica fonte de an√°lise.

**Se√ß√µes Obrigat√≥rias (t√≠tulos em mai√∫sculo):**

- DADOS DO ATENDIMENTO  
- QUALIFICA√á√ÉO E CONTEXTO DO ASSISTIDO  
- PROBLEMA JUR√çDICO APRESENTADO  
- ELEMENTOS DE FATO RELEVANTES  
- ELEMENTOS DE DIREITO IDENTIFICADOS  
- A√á√ïES REALIZADAS NO ATENDIMENTO  
- AN√ÅLISE CR√çTICA DO PROCEDIMENTO  
- ORIENTA√á√ïES PARA O ESTAGI√ÅRIO  

O conte√∫do da transcri√ß√£o a ser analisado est√° delimitado entre #### TRANSCRI√á√ÉO ####.

#### TRANSCRI√á√ÉO ####
{}
#### TRANSCRI√á√ÉO ####
'''


# --- Sele√ß√£o de Prompt ---
st.sidebar.title("Tipo de Atendimento")
tipo_atendimento = st.sidebar.radio("Selecione o tipo:", ["Psicol√≥gico", "Jur√≠dico"])
prompt_analise = PROMPT_PSICOLOGICO if tipo_atendimento == "Psicol√≥gico" else PROMPT_JURIDICO

# --- Diret√≥rios ---
PASTA_TEMP = Path("temp")
PASTA_TRANSCRICOES = Path("TRANSCRICOES")
PASTA_TEMP.mkdir(exist_ok=True)
PASTA_TRANSCRICOES.mkdir(exist_ok=True)
ARQUIVO_AUDIO_TEMP = PASTA_TEMP / "audio.wav"
ARQUIVO_VIDEO_TEMP = PASTA_TEMP / "video.mp4"
ARQUIVO_MIC_TEMP = PASTA_TEMP / "mic.wav"

client = openai.OpenAI()

# --- Processamento ---
def processa_transcricao_chatgpt(texto: str) -> str:
    resposta = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt_analise.format(texto)}]
    )
    return resposta.choices[0].message.content

def transcreve_audio(caminho_audio: str, prompt: str) -> tuple[str, str]:
    with open(caminho_audio, 'rb') as arquivo:
        resp = client.audio.transcriptions.create(
            model='whisper-1',
            language='pt',
            response_format='text',
            file=arquivo,
            prompt=prompt,
        )
        analise = processa_transcricao_chatgpt(resp)
        return resp, analise

def converter_para_wav(caminho_entrada: str) -> str:
    audio = pydub.AudioSegment.from_file(caminho_entrada)
    fd, caminho_wav = tempfile.mkstemp(suffix=".wav", prefix="audio_")
    os.close(fd)
    audio.export(caminho_wav, format="wav")
    return caminho_wav

def salva_transcricao(texto: str, analise: str, origem: str = ""):
    agora = datetime.now().strftime("%Y_%m_%d_%H_%M_%S")
    prefixo = f"{agora}_{origem}" if origem else agora
    with open(PASTA_TRANSCRICOES / f"{prefixo}_transcricao.txt", 'w', encoding='utf-8') as f:
        f.write(texto)
    with open(PASTA_TRANSCRICOES / f"{prefixo}_analise.txt", 'w', encoding='utf-8') as f:
        f.write(analise)

# --- Abas ---
def transcreve_tab_audio():
    st.subheader("An√°lise de √Åudio")
    audio = st.file_uploader("Envie um arquivo de √°udio", type=["mp3", "wav", "m4a", "ogg"])
    if audio:
        caminho = PASTA_TEMP / audio.name
        with open(caminho, 'wb') as f:
            f.write(audio.read())
        wav = converter_para_wav(str(caminho))
        texto, analise = transcreve_audio(wav, prompt_analise)
        st.write("**Transcri√ß√£o:**")
        st.write(texto)
        st.write("**An√°lise:**")
        st.write(analise)
        salva_transcricao(texto, analise, f"audio_{audio.name}")

def transcreve_tab_video():
    st.subheader("An√°lise de V√≠deo")
    video = st.file_uploader("Envie um v√≠deo", type=["mp4", "mov", "avi", "mkv"])
    if video:
        with open(ARQUIVO_VIDEO_TEMP, 'wb') as f:
            f.write(video.read())
        clip = VideoFileClip(str(ARQUIVO_VIDEO_TEMP))
        clip.audio.write_audiofile(str(ARQUIVO_AUDIO_TEMP), logger=None)
        wav = converter_para_wav(str(ARQUIVO_AUDIO_TEMP))
        texto, analise = transcreve_audio(wav, prompt_analise)
        st.write("**Transcri√ß√£o:**")
        st.write(texto)
        st.write("**An√°lise:**")
        st.write(analise)
        salva_transcricao(texto, analise, f"video_{video.name}")

def transcreve_tab_texto():
    st.subheader("An√°lise de Texto")
    texto_arquivo = st.file_uploader("Envie um arquivo de texto (.txt, .docx)", type=["txt", "doc", "docx"])
    if texto_arquivo:
        try:
            if texto_arquivo.type == "text/plain":
                texto = texto_arquivo.getvalue().decode('utf-8')
            else:
                import docx2txt
                texto = docx2txt.process(texto_arquivo)
            analise = processa_transcricao_chatgpt(texto)
            st.write("**Texto Original:**")
            st.write(texto)
            st.write("**An√°lise:**")
            st.write(analise)
            salva_transcricao(texto, analise, f"texto_{texto_arquivo.name}")
        except Exception as e:
            st.error(f"Erro ao processar: {str(e)}")

def main():
    st.title("üéôÔ∏è Assistente de Organiza√ß√£o")
    st.markdown("Grava√ß√£o, Transcri√ß√£o e Organiza√ß√£o.")
    abas = st.tabs(["√Åudio", "V√≠deo", "Texto"])
    with abas[0]:
        transcreve_tab_audio()
    with abas[1]:
        transcreve_tab_video()
    with abas[2]:
        transcreve_tab_texto()

if __name__ == '__main__':
    main()
