import sys
import audioop
sys.modules['pyaudioop'] = audioop

from pathlib import Path
from datetime import datetime
import time
import queue
import tempfile
import os

import streamlit as st
from streamlit_webrtc import WebRtcMode, webrtc_streamer

import openai
import pydub
from moviepy.video.io.VideoFileClip import VideoFileClip
from dotenv import load_dotenv, find_dotenv
from openai import RateLimitError

_ = load_dotenv(find_dotenv())

PASTA_TEMP = Path(__file__).parent / 'temp'
PASTA_TEMP.mkdir(exist_ok=True)
PASTA_TRANSCRICOES = Path(__file__).parent / 'TRANSCRICOES'
PASTA_TRANSCRICOES.mkdir(exist_ok=True)

ARQUIVO_AUDIO_TEMP = PASTA_TEMP / 'audio.wav'
ARQUIVO_VIDEO_TEMP = PASTA_TEMP / 'video.mp4'
ARQUIVO_MIC_TEMP = PASTA_TEMP / 'mic.wav'

client = openai.OpenAI()
local_model = None

def get_local_whisper():
    global local_model
    if local_model is None:
        import whisper
        local_model = whisper.load_model("base")
    return local_model

# Prompts
PROMPT_PSICOLOGICO = ''' 
Voc√™ √© um Psic√≥logo/Neuropsic√≥logo Assistente com mais de 30 anos de experi√™ncia no Brasil, atuando diretamente como suporte t√©cnico de LUAN GAMA WANDERLEY LEITE (CRP-15/3328), Psic√≥logo e Assessor T√©cnico da Defensoria P√∫blica do Estado de Alagoas (Mat. 9864616-8).

Sua tarefa √© analisar as informa√ß√µes registradas a seguir, delimitadas por #### DADOS ####, e produzir uma **estrutura de avalia√ß√£o psicol√≥gica inicial**, de acordo com os par√¢metros √©tico-profissionais, com base cient√≠fica e 100% conforme as resolu√ß√µes do CFP.

Siga estritamente as seguintes se√ß√µes e orienta√ß√µes:

üîç **1. IDENTIFICA√á√ÉO DA DEMANDA**  
- Especifique a origem da demanda: espont√¢nea, judicial, institucional ou encaminhamento.  
- Avalie a urg√™ncia e a natureza principal da demanda (psicol√≥gica, psiqui√°trica, social, jur√≠dica).  

üìã **2. REGISTRO E DOCUMENTA√á√ÉO**  
- Realize anamnese com dados sociodemogr√°ficos, hist√≥ria cl√≠nica, familiar, social, educacional e laboral.  
- Registre de forma √©tica e sigilosa, conforme as Resolu√ß√µes CFP n¬∫ 01/2009 e n¬∫ 06/2019.  
- Utilize instrumentos estruturados e entrevistas cl√≠nicas conforme a Resolu√ß√£o CFP n¬∫ 31/2022.  

üß† **3. OBSERVA√á√ÉO PSICOL√ìGICA E IMPRESS√ïES CL√çNICAS INICIAIS**  
- Descreva o estado mental, o comportamento observado e o modo de comunica√ß√£o do assistido.  
- Registre indicadores de sofrimento ps√≠quico, risco psicossocial, sinais de viol√™ncia ou idea√ß√£o suicida.  

üßæ **4. PLANO INICIAL DE A√á√ÉO**  
- Indique se haver√° continuidade do acompanhamento na DPE ou necessidade de encaminhamento (CAPS, CRAS, UBS etc.).  
- Avalie a necessidade de elabora√ß√£o de documentos (relat√≥rio, laudo, parecer) ou aprofundamento diagn√≥stico.  

üßë‚Äç‚öñÔ∏è **5. CONTEXTO JUR√çDICO E ARTICULA√á√ÉO INTERSETORIAL**  
- Verifique a exist√™ncia de v√≠nculo com processos jur√≠dicos e, se aplic√°vel, a articula√ß√£o com defensores(as).  
- Projete a produ√ß√£o de documentos que possam subsidiar decis√µes judiciais.  

ü§ù **6. CONSENTIMENTO E ORIENTA√á√ïES √âTICAS**  
- Confirme que foram explicadas as regras de sigilo, os limites da atua√ß√£o na DPE e os usos das informa√ß√µes.  
- Verifique e registre a obten√ß√£o de Termo de Consentimento Informado, se aplic√°vel.  

üìå **7. HIP√ìTESES DIAGN√ìSTICAS INICIAIS E ENCAMINHAMENTOS**  
- Apresente hip√≥teses diagn√≥sticas preliminares com base nos dados e instrumentos dispon√≠veis.  
- Estruture um Termo de Encaminhamento interno ou externo, se pertinente.

**Diretrizes complementares:**
- Utilize linguagem t√©cnica e clara, evitando infer√™ncias n√£o fundamentadas.  
- Mantenha fidelidade aos dados. Caso algo n√£o tenha sido informado, sinalize como "n√£o identificado".  
- Fundamente suas observa√ß√µes na literatura e nas normas do CFP.

O conte√∫do a ser analisado est√° entre os delimitadores:

#### DADOS ####
{}
#### DADOS ####
'''

PROMPT_JURIDICO = ''' 
Voc√™ √© um Defensor P√∫blico Supervisor e sua tarefa √© analisar tecnicamente a transcri√ß√£o de um atendimento jur√≠dico prestado no N√∫cleo de Atendimento a Idosos da Defensoria P√∫blica do Estado de Alagoas.

Sua an√°lise servir√° de base para orienta√ß√£o e forma√ß√£o dos estagi√°rios envolvidos. Utilize linguagem t√©cnica e formal, rigorosamente jur√≠dica, e estruture a resposta conforme os t√≥picos indicados abaixo.

Diretrizes:

1. Evite infer√™ncias n√£o sustentadas nos fatos relatados. Se houver lacunas, registre como "n√£o informado" ou "n√£o identificado".
2. Respeite o sigilo e a √©tica profissional; n√£o inclua ju√≠zos de valor ou suposi√ß√µes pessoais.
3. Utilize o conte√∫do delimitado por #### TRANSCRI√á√ÉO #### como √∫nica fonte de an√°lise.

**Se√ß√µes Obrigat√≥rias (t√≠tulos em mai√∫sculo):**

- DADOS DO ATENDIMENTO  
- QUALIFICA√á√ÉO E CONTEXTO DO ASSISTIDO  
- PROBLEMA JUR√çDICO APRESENTADO  
- ELEMENTOS DE FATO RELEVANTES  
- ELEMENTOS DE DIREITO IDENTIFICADOS  
- A√á√ïES REALIZADAS NO ATENDIMENTO  
- AN√ÅLISE CR√çTICA DO PROCEDIMENTO  
- ORIENTA√á√ïES PARA O ESTAGI√ÅRIO  

O conte√∫do da transcri√ß√£o a ser analisado est√° delimitado entre #### TRANSCRI√á√ÉO ####.

#### TRANSCRI√á√ÉO ####
{}
#### TRANSCRI√á√ÉO ####
'''

PROMPT_SERVICO_SOCIAL = '''
Voc√™ √© um Assistente de Servi√ßo Social com s√≥lida experi√™ncia em atua√ß√£o na Defensoria P√∫blica, especializado em demandas sociais de pessoas idosas. Sua tarefa √© analisar as informa√ß√µes a seguir, delimitadas por #### DADOS ####, e produzir uma **estrutura de avalia√ß√£o social inicial**, de acordo com as normas √©tico‚Äêprofissionais do Servi√ßo Social (CFESS/CFP) e com base em evid√™ncias. Siga rigorosamente as se√ß√µes abaixo:

1. CONTEXTO E HIST√ìRICO:
   - Identifique origem da demanda: espont√¢nea, judicial, institucional ou encaminhamento.
   - Registre informa√ß√µes sociodemogr√°ficas, composi√ß√£o familiar, rede de apoio, condi√ß√µes de moradia e renda.
   - Contextualize aspectos culturais e ambientais relevantes √† situa√ß√£o do assistido.

2. DIAGN√ìSTICO SOCIAL:
   - Avalie fatores de risco social: vulnerabilidade, viol√™ncia, abandono, car√™ncia de recursos.
   - Verifique acesso a pol√≠ticas p√∫blicas (CRAS, CREAS, Benef√≠cio de Presta√ß√£o Continuada, Habita√ß√£o Popular etc.).
   - Identifique indicadores de fragilidade: sa√∫de prec√°ria, isolamento, depend√™ncia financeira.

3. RECURSOS E REDES DE APOIO:
   - Liste servi√ßos e programas sociais dispon√≠veis e poss√≠veis encaminhamentos.
   - Avalie a presen√ßa de cuidadores formais/informais e a qualidade do suporte familiar.
   - An√°lise da viabilidade de programas de prote√ß√£o ao idoso ou rede de assist√™ncia.

4. PLANO DE INTERVEN√á√ÉO INICIAL:
   - Defina a√ß√µes imediatas e de m√©dio prazo: solicita√ß√£o de benef√≠cios, inclus√£o em programas de assist√™ncia, articula√ß√£o com √≥rg√£os municipais/estaduais.
   - Sugira inclus√£o em rede de servi√ßos (Sa√∫de, Assist√™ncia Social, Educa√ß√£o, Direitos Humanos).
   - Preveja acompanhamento continuado e frequ√™ncia de visitas domiciliares (se necess√°rio).

5. ARTICULA√á√ÉO INTERSETORIAL:
   - Verifique v√≠nculo com processos judiciais e atua√ß√£o conjunta com Defensoria P√∫blica.
   - Projete relat√≥rios t√©cnicos ou pareceres para subsidiar decis√µes judiciais e sociais.
   - Indique poss√≠veis parcerias com organiza√ß√µes n√£o governamentais e conselhos de direitos do idoso.

6. √âTICA E DIRETRIZES PROFISSIONAIS:
   - Confirme cumprimento de normativas do CFESS e princ√≠pios do Servi√ßo Social: sigilo, autonomia, respeito √† dignidade.
   - Registre obten√ß√£o de Termo de Consentimento Informado, se aplic√°vel.
   - Ressalte a import√¢ncia da escuta qualificada e do protagonismo do assistido.

7. ENCAMINHAMENTOS E RECOMENDA√á√ïES:
   - Apresente encaminhamentos imediatos (CRAS, CREAS, CAPS, UBS, CAPS-Idoso, CUCA etc.).
   - Sugira estrat√©gias de fortalecimento de rede social: grupos de conviv√™ncia, Centro Dia do Idoso.
   - Estruture modelo de Relat√≥rio Social ou Parecer Social para a Defensoria P√∫blica.

#### DADOS ####
{}
#### DADOS ####
'''

def st_webrtc_audio_recorder():
    webrtc_ctx = webrtc_streamer(
        key="mic",
        mode=WebRtcMode.SENDRECV,
        audio_receiver_size=1024,
        video=False,
        async_processing=True,
    )

    audio_bytes = None
    if webrtc_ctx.audio_receiver:
        try:
            frames = webrtc_ctx.audio_receiver.get_frames(timeout=1)
            audio_bytes = b"".join([f.to_ndarray().tobytes() for f in frames])
        except queue.Empty:
            pass

    return audio_bytes

def transcreve_tab_mic():
    st.subheader("Gravador de Microfone")
    st.markdown("Pressione o bot√£o abaixo para iniciar a grava√ß√£o de voz.")

    audio_buffer = st_webrtc_audio_recorder()

    if audio_buffer:
        # Exibe player de √°udio
        st.audio(audio_buffer, format="audio/wav")

        # Salva o √°udio temporariamente
        with open(ARQUIVO_MIC_TEMP, "wb") as f:
            f.write(audio_buffer)

        # Transcreve com Whisper local
        modelo = get_local_whisper()
        resultado = modelo.transcribe(str(ARQUIVO_MIC_TEMP))

        st.subheader("Transcri√ß√£o")
        st.text_area("Texto transcrito:", resultado["text"], height=300)

def transcreve_tab_video():
    st.subheader("Envio de Arquivo de V√≠deo")
    arquivo_video = st.file_uploader("Envie um v√≠deo (.mp4, .mov)", type=["mp4", "mov"])
    if arquivo_video:
        caminho_temp = PASTA_TEMP / arquivo_video.name
        with open(caminho_temp, "wb") as f:
            f.write(arquivo_video.getbuffer())
        st.video(str(caminho_temp))
        try:
            resultado = get_local_whisper().transcribe(str(caminho_temp))
            st.subheader("Transcri√ß√£o")
            st.text_area("Texto transcrito:", resultado["text"], height=300)
        except Exception as e:
            st.error(f"Erro ao transcrever v√≠deo: {e}")

def transcreve_tab_audio():
    st.subheader("Envio de Arquivo de √Åudio")
    arquivo_audio = st.file_uploader("Envie um √°udio (.wav, .mp3)", type=["wav", "mp3"])
    if arquivo_audio:
        caminho_temp = PASTA_TEMP / arquivo_audio.name
        with open(caminho_temp, "wb") as f:
            f.write(arquivo_audio.getbuffer())
        st.audio(str(caminho_temp), format="audio/wav")
        try:
            resultado = get_local_whisper().transcribe(str(caminho_temp))
            st.subheader("Transcri√ß√£o")
            st.text_area("Texto transcrito:", resultado["text"], height=300)
        except Exception as e:
            st.error(f"Erro ao transcrever √°udio: {e}")

def transcreve_tab_texto():
    st.subheader("Envio de Arquivo de Texto")
    arquivo_texto = st.file_uploader("Envie um arquivo de texto (.txt, .docx)", type=["txt", "docx"])
    if arquivo_texto:
        try:
            if arquivo_texto.type == "text/plain":
                conteudo = arquivo_texto.read().decode("utf-8")
            else:
                from docx import Document
                doc = Document(arquivo_texto)
                conteudo = "\n".join([p.text for p in doc.paragraphs])
            st.subheader("Conte√∫do do Texto")
            st.text_area("Texto extra√≠do:", conteudo, height=300)
        except Exception as e:
            st.error(f"Erro ao ler texto: {e}")

def main():
    st.sidebar.title("Selecione o tipo de atendimento")
    tipo_prompt = st.sidebar.radio("Tipo de An√°lise:", ["Psicol√≥gico", "Jur√≠dico", "Servi√ßo Social"])
    if tipo_prompt == "Psicol√≥gico":
        prompt_escolhido = PROMPT_PSICOLOGICO
    elif tipo_prompt == "Jur√≠dico":
        prompt_escolhido = PROMPT_JURIDICO
    else:
        prompt_escolhido = PROMPT_SERVICO_SOCIAL

    st.session_state['prompt_escolhido'] = prompt_escolhido

    st.header('Assistente de Organiza√ß√£o')
    st.markdown('Grava√ß√£o, Transcri√ß√£o e Organiza√ß√£o.')
    st.markdown('Reuni√µes, Palestras, Atendimentos e Outros.')

    abas = st.tabs(['Microfone', 'V√≠deo', '√Åudio', 'Texto'])
    with abas[0]:
        transcreve_tab_mic()
    with abas[1]:
        transcreve_tab_video()
    with abas[2]:
        transcreve_tab_audio()
    with abas[3]:
        transcreve_tab_texto()

if __name__ == '__main__':
    main()
