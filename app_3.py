import sys, audioop
sys.modules['pyaudioop'] = audioop

from pathlib import Path
from datetime import datetime
import time
import queue
import tempfile
import os
import streamlit as st
from streamlit_webrtc import WebRtcMode, webrtc_streamer
import openai
import pydub
from moviepy.video.io.VideoFileClip import VideoFileClip
from dotenv import load_dotenv, find_dotenv
from openai import RateLimitError

_ = load_dotenv(find_dotenv())

PASTA_TEMP = Path(__file__).parent / 'temp'
PASTA_TEMP.mkdir(exist_ok=True)
PASTA_TRANSCRICOES = Path(__file__).parent / 'TRANSCRICOES'
PASTA_TRANSCRICOES.mkdir(exist_ok=True)

ARQUIVO_AUDIO_TEMP = PASTA_TEMP / 'audio.wav'
ARQUIVO_VIDEO_TEMP = PASTA_TEMP / 'video.mp4'
ARQUIVO_MIC_TEMP = PASTA_TEMP / 'mic.wav'

client = openai.OpenAI()

@st.cache_resource
def get_local_whisper():
    import whisper
    return whisper.load_model("base")

# Prompts
PROMPT_PSICOLOGICO = ''' 
Voc√™ √© um Psic√≥logo/Neuropsic√≥logo Assistente com mais de 30 anos de experi√™ncia no Brasil, atuando diretamente como suporte t√©cnico de LUAN GAMA WANDERLEY LEITE (CRP-15/3328), Psic√≥logo e Assessor T√©cnico da Defensoria P√∫blica do Estado de Alagoas (Mat. 9864616-8).

Sua tarefa √© analisar as informa√ß√µes registradas a seguir, delimitadas por #### DADOS ####, e produzir uma **estrutura de avalia√ß√£o psicol√≥gica inicial**, de acordo com os par√¢metros √©tico-profissionais, com base cient√≠fica e 100% conforme as resolu√ß√µes do CFP.

Siga estritamente as seguintes se√ß√µes e orienta√ß√µes:

üîç **1. IDENTIFICA√á√ÉO DA DEMANDA**  
- Especifique a origem da demanda: espont√¢nea, judicial, institucional ou encaminhamento.  
- Avalie a urg√™ncia e a natureza principal da demanda (psicol√≥gica, psiqui√°trica, social, jur√≠dica).  

üìã **2. REGISTRO E DOCUMENTA√á√ÉO**  
- Realize anamnese com dados sociodemogr√°ficos, hist√≥ria cl√≠nica, familiar, social, educacional e laboral.  
- Registre de forma √©tica e sigilosa, conforme as Resolu√ß√µes CFP n¬∫ 01/2009 e n¬∫ 06/2019.  
- Utilize instrumentos estruturados e entrevistas cl√≠nicas conforme a Resolu√ß√£o CFP n¬∫ 31/2022.  

üß† **3. OBSERVA√á√ÉO PSICOL√ìGICA E IMPRESS√ïES CL√çNICAS INICIAIS**  
- Descreva o estado mental, o comportamento observado e o modo de comunica√ß√£o do assistido.  
- Registre indicadores de sofrimento ps√≠quico, risco psicossocial, sinais de viol√™ncia ou idea√ß√£o suicida.  

üßæ **4. PLANO INICIAL DE A√á√ÉO**  
- Indique se haver√° continuidade do acompanhamento na DPE ou necessidade de encaminhamento (CAPS, CRAS, UBS etc.).  
- Avalie a necessidade de elabora√ß√£o de documentos (relat√≥rio, laudo, parecer) ou aprofundamento diagn√≥stico.  

üßë‚Äç‚öñÔ∏è **5. CONTEXTO JUR√çDICO E ARTICULA√á√ÉO INTERSETORIAL**  
- Verifique a exist√™ncia de v√≠nculo com processos jur√≠dicos e, se aplic√°vel, a articula√ß√£o com defensores(as).  
- Projete a produ√ß√£o de documentos que possam subsidiar decis√µes judiciais.  

ü§ù **6. CONSENTIMENTO E ORIENTA√á√ïES √âTICAS**  
- Confirme que foram explicadas as regras de sigilo, os limites da atua√ß√£o na DPE e os usos das informa√ß√µes.  
- Verifique e registre a obten√ß√£o de Termo de Consentimento Informado, se aplic√°vel.  

üìå **7. HIP√ìTESES DIAGN√ìSTICAS INICIAIS E ENCAMINHAMENTOS**  
- Apresente hip√≥teses diagn√≥sticas preliminares com base nos dados e instrumentos dispon√≠veis.  
- Estruture um Termo de Encaminhamento interno ou externo, se pertinente.

**Diretrizes complementares:**
- Utilize linguagem t√©cnica e clara, evitando infer√™ncias n√£o fundamentadas.  
- Mantenha fidelidade aos dados. Caso algo n√£o tenha sido informado, sinalize como "n√£o identificado".  
- Fundamente suas observa√ß√µes na literatura e nas normas do CFP.

O conte√∫do a ser analisado est√° entre os delimitadores:

#### DADOS ####
{}
#### DADOS ####
'''

PROMPT_JURIDICO = ''' 
Voc√™ √© um Defensor P√∫blico Supervisor e sua tarefa √© analisar tecnicamente a transcri√ß√£o de um atendimento jur√≠dico prestado no N√∫cleo de Atendimento a Idosos da Defensoria P√∫blica do Estado de Alagoas.

Sua an√°lise servir√° de base para orienta√ß√£o e forma√ß√£o dos estagi√°rios envolvidos. Utilize linguagem t√©cnica e formal, rigorosamente jur√≠dica, e estruture a resposta conforme os t√≥picos indicados abaixo.

Diretrizes:

1. Evite infer√™ncias n√£o sustentadas nos fatos relatados. Se houver lacunas, registre como "n√£o informado" ou "n√£o identificado".
2. Respeite o sigilo e a √©tica profissional; n√£o inclua ju√≠zos de valor ou suposi√ß√µes pessoais.
3. Utilize o conte√∫do delimitado por #### TRANSCRI√á√ÉO #### como √∫nica fonte de an√°lise.

**Se√ß√µes Obrigat√≥rias (t√≠tulos em mai√∫sculo):**

- DADOS DO ATENDIMENTO  
- QUALIFICA√á√ÉO E CONTEXTO DO ASSISTIDO  
- PROBLEMA JUR√çDICO APRESENTADO  
- ELEMENTOS DE FATO RELEVANTES  
- ELEMENTOS DE DIREITO IDENTIFICADOS  
- A√á√ïES REALIZADAS NO ATENDIMENTO  
- AN√ÅLISE CR√çTICA DO PROCEDIMENTO  
- ORIENTA√á√ïES PARA O ESTAGI√ÅRIO  

O conte√∫do da transcri√ß√£o a ser analisado est√° delimitado entre #### TRANSCRI√á√ÉO ####.

#### TRANSCRI√á√ÉO ####
{}
#### TRANSCRI√á√ÉO ####
'''

PROMPT_SERVICO_SOCIAL = '''
Voc√™ √© um Assistente de Servi√ßo Social com s√≥lida experi√™ncia em atua√ß√£o na Defensoria P√∫blica, especializado em demandas sociais de pessoas idosas. Sua tarefa √© analisar as informa√ß√µes a seguir, delimitadas por #### DADOS ####, e produzir uma **estrutura de avalia√ß√£o social inicial**, de acordo com as normas √©tico‚Äêprofissionais do Servi√ßo Social (CFESS/CFP) e com base em evid√™ncias. Siga rigorosamente as se√ß√µes abaixo:

1. CONTEXTO E HIST√ìRICO:
   - Identifique origem da demanda: espont√¢nea, judicial, institucional ou encaminhamento.
   - Registre informa√ß√µes sociodemogr√°ficas, composi√ß√£o familiar, rede de apoio, condi√ß√µes de moradia e renda.
   - Contextualize aspectos culturais e ambientais relevantes √† situa√ß√£o do assistido.

2. DIAGN√ìSTICO SOCIAL:
   - Avalie fatores de risco social: vulnerabilidade, viol√™ncia, abandono, car√™ncia de recursos.
   - Verifique acesso a pol√≠ticas p√∫blicas (CRAS, CREAS, Benef√≠cio de Presta√ß√£o Continuada, Habita√ß√£o Popular etc.).
   - Identifique indicadores de fragilidade: sa√∫de prec√°ria, isolamento, depend√™ncia financeira.

3. RECURSOS E REDES DE APOIO:
   - Liste servi√ßos e programas sociais dispon√≠veis e poss√≠veis encaminhamentos.
   - Avalie a presen√ßa de cuidadores formais/informais e a qualidade do suporte familiar.
   - An√°lise da viabilidade de programas de prote√ß√£o ao idoso ou rede de assist√™ncia.

4. PLANO DE INTERVEN√á√ÉO INICIAL:
   - Defina a√ß√µes imediatas e de m√©dio prazo: solicita√ß√£o de benef√≠cios, inclus√£o em programas de assist√™ncia, articula√ß√£o com √≥rg√£os municipais/estaduais.
   - Sugira inclus√£o em rede de servi√ßos (Sa√∫de, Assist√™ncia Social, Educa√ß√£o, Direitos Humanos).
   - Preveja acompanhamento continuado e frequ√™ncia de visitas domiciliares (se necess√°rio).

5. ARTICULA√á√ÉO INTERSETORIAL:
   - Verifique v√≠nculo com processos judiciais e atua√ß√£o conjunta com Defensoria P√∫blica.
   - Projete relat√≥rios t√©cnicos ou pareceres para subsidiar decis√µes judiciais e sociais.
   - Indique poss√≠veis parcerias com organiza√ß√µes n√£o governamentais e conselhos de direitos do idoso.

6. √âTICA E DIRETRIZES PROFISSIONAIS:
   - Confirme cumprimento de normativas do CFESS e princ√≠pios do Servi√ßo Social: sigilo, autonomia, respeito √† dignidade.
   - Registre obten√ß√£o de Termo de Consentimento Informado, se aplic√°vel.
   - Ressalte a import√¢ncia da escuta qualificada e do protagonismo do assistido.

7. ENCAMINHAMENTOS E RECOMENDA√á√ïES:
   - Apresente encaminhamentos imediatos (CRAS, CREAS, CAPS, UBS, CAPS-Idoso, CUCA etc.).
   - Sugira estrat√©gias de fortalecimento de rede social: grupos de conviv√™ncia, Centro Dia do Idoso.
   - Estruture modelo de Relat√≥rio Social ou Parecer Social para a Defensoria P√∫blica.

#### DADOS ####
{}
#### DADOS ####
'''

PROMPTS = {
    "Psicol√≥gico": PROMPT_PSICOLOGICO,
    "Jur√≠dico": PROMPT_JURIDICO,
    "Servi√ßo Social": PROMPT_SERVICO_SOCIAL
}

def transcreve_tab_mic():
    tipo_atendimento = st.radio('Tipo de Atendimento:', ['Psicol√≥gico', 'Servi√ßo Social', 'Jur√≠dico'], horizontal=True)
    prompt_mic = PROMPTS[tipo_atendimento]
    st.text_area("Prompt Selecionado:", prompt_mic[:800] + '...', height=300)

@handle_openai_error
def processa_transcricao_chatgpt(texto: str) -> str:
    """Processa o texto usando o ChatGPT para gerar uma an√°lise estruturada"""
    resposta = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "user", "content": PROMPT_ANALISE.format(texto)}
        ]
    )
    return resposta.choices[0].message.content

# Converte qualquer formato suportado para WAV
def converter_para_wav(caminho_entrada: str) -> str:
    audio = pydub.AudioSegment.from_file(caminho_entrada)
    fd, caminho_wav = tempfile.mkstemp(suffix=".wav", prefix="audio_")
    os.close(fd)
    audio.export(caminho_wav, format="wav")
    return caminho_wav

@handle_openai_error
def transcreve_audio(caminho_audio: str, prompt: str) -> tuple[str, str]:
    with open(caminho_audio, 'rb') as arquivo:
        try:
            resp = client.audio.transcriptions.create(
                model='whisper-1',
                language='pt',
                response_format='text',
                file=arquivo,
                prompt=prompt,
            )
            analise = processa_transcricao_chatgpt(resp)
            return resp, analise
        except Exception as e:
            st.warning(f"Erro na API OpenAI: {str(e)}. Usando servi√ßo local.")
            return use_fallback_service(caminho_audio, prompt)

# Estado inicial para transcri√ß√£o do microfone
if 'transcricao_mic' not in st.session_state:
    st.session_state['transcricao_mic'] = ''
if 'analise_mic' not in st.session_state:
    st.session_state['analise_mic'] = ''
if 'gravando_audio' not in st.session_state:
    st.session_state['gravando_audio'] = False
if 'audio_completo' not in st.session_state:
    st.session_state['audio_completo'] = pydub.AudioSegment.empty()

# Cache para configura√ß√£o de ICE servers
@st.cache_data
def get_ice_servers():
    return [{'urls': ['stun:stun.l.google.com:19302']}]

# Concatena frames em AudioSegment
def adiciona_chunck_de_audio(frames, chunk_audio):
    for frame in frames:
        seg = pydub.AudioSegment(
            data=frame.to_ndarray().tobytes(),
            sample_width=frame.format.bytes,
            frame_rate=frame.sample_rate,
            channels=len(frame.layout.channels)
        )
        chunk_audio += seg
    return chunk_audio

def salva_transcricao(texto: str, analise: str, origem: str = ""):
    """Salva a transcri√ß√£o original e a an√°lise em arquivos separados"""
    agora = datetime.now().strftime("%Y_%m_%d_%H_%M_%S")
    prefixo = f"{agora}_{origem}" if origem else agora
    
    # Salva transcri√ß√£o original
    arquivo_transcricao = PASTA_TRANSCRICOES / f"{prefixo}_transcricao.txt"
    with open(arquivo_transcricao, 'w', encoding='utf-8') as f:
        f.write(texto)
    
    # Salva an√°lise estruturada
    arquivo_analise = PASTA_TRANSCRICOES / f"{prefixo}_analise.txt"
    with open(arquivo_analise, 'w', encoding='utf-8') as f:
        f.write(analise)
    
    return arquivo_transcricao, arquivo_analise

# Aba Microfone
def transcreve_tab_mic():
    prompt_mic = st.text_input('Prompt (opcional)', key='input_mic')
    
    col1, col2 = st.columns([3, 1])
    with col2:
        if st.button('üî¥ Gravar √Åudio' if not st.session_state['gravando_audio'] else '‚èπÔ∏è Parar Grava√ß√£o'):
            st.session_state['gravando_audio'] = not st.session_state['gravando_audio']
            if not st.session_state['gravando_audio'] and len(st.session_state['audio_completo']) > 0:
                st.session_state['audio_completo'].export(
                    PASTA_TRANSCRICOES / f"audio_{datetime.now().strftime('%Y_%m_%d_%H_%M_%S')}.wav",
                    format='wav'
                )
                st.session_state['audio_completo'] = pydub.AudioSegment.empty()
    
    ctx = webrtc_streamer(
        key='mic', mode=WebRtcMode.SENDONLY,
        audio_receiver_size=1024,
        media_stream_constraints={'video': False, 'audio': True},
        rtc_configuration={"iceServers": get_ice_servers()}
    )

    # Quando parar a grava√ß√£o
    if not ctx.state.playing:
        # Reseta estado de grava√ß√£o de √°udio
        if st.session_state['gravando_audio']:
            st.session_state['gravando_audio'] = False
            if len(st.session_state['audio_completo']) > 0:
                st.session_state['audio_completo'].export(
                    PASTA_TRANSCRICOES / f"audio_{datetime.now().strftime('%Y_%m_%d_%H_%M_%S')}.wav",
                    format='wav'
                )
                st.session_state['audio_completo'] = pydub.AudioSegment.empty()
        
        if st.session_state['transcricao_mic']:  # Se h√° transcri√ß√£o
            if not st.session_state['analise_mic']:  # Se ainda n√£o gerou an√°lise
                st.write("Gerando an√°lise...")
                st.session_state['analise_mic'] = processa_transcricao_chatgpt(st.session_state['transcricao_mic'])
            
            st.write("**Transcri√ß√£o:**")
            st.write(st.session_state['transcricao_mic'])
            st.write("**An√°lise:**")
            st.write(st.session_state['analise_mic'])
            
            salva_transcricao(
                st.session_state['transcricao_mic'],
                st.session_state['analise_mic'],
                'microfone'
            )
        return

    status_col1, status_col2 = st.columns(2)
    with status_col1:
        st.markdown('**üéôÔ∏è Transcrevendo...**')
    with status_col2:
        if st.session_state['gravando_audio']:
            st.markdown('**üî¥ Gravando √°udio...**')

    placeholder = st.empty()
    chunk_audio = pydub.AudioSegment.empty()
    ultimo = time.time()
    st.session_state['transcricao_mic'] = ''
    st.session_state['analise_mic'] = ''

    while ctx.audio_receiver:
        try:
            frames = ctx.audio_receiver.get_frames(timeout=1)
        except queue.Empty:
            time.sleep(0.1)
            continue
        
        # Processa os frames de √°udio
        chunk_atual = pydub.AudioSegment.empty()
        chunk_atual = adiciona_chunck_de_audio(frames, chunk_atual)
        chunk_audio += chunk_atual
        
        # Se estiver gravando, adiciona ao √°udio completo
        if st.session_state['gravando_audio']:
            st.session_state['audio_completo'] += chunk_atual
        
        agora = time.time()
        # A cada 10s, transcreve
        if len(chunk_audio) > 0 and agora - ultimo > 10:
            ultimo = agora
            # exporta temporariamente para transcri√ß√£o
            chunk_audio.export(ARQUIVO_MIC_TEMP, format='wav')
            texto, _ = transcreve_audio(str(ARQUIVO_MIC_TEMP), prompt_mic)
            st.session_state['transcricao_mic'] += texto
            placeholder.write(st.session_state['transcricao_mic'])
            chunk_audio = pydub.AudioSegment.empty()

# Extrai √°udio de v√≠deo
def _salva_audio_do_video(file_bytes):
    with open(ARQUIVO_VIDEO_TEMP, 'wb') as f:
        f.write(file_bytes.read())
    clip = VideoFileClip(str(ARQUIVO_VIDEO_TEMP))
    clip.audio.write_audiofile(str(ARQUIVO_AUDIO_TEMP), logger=None)

# Aba V√≠deo
def transcreve_tab_video():
    prompt = st.text_input('Prompt (opcional)', key='input_video')
    video = st.file_uploader('Adicione um v√≠deo', type=['mp4','mov','avi','mkv','webm'])
    if video:
        # salva v√≠deo e extrai √°udio WAV
        _salva_audio_do_video(video)
        wav = converter_para_wav(str(ARQUIVO_AUDIO_TEMP))
        texto, analise = transcreve_audio(wav, prompt)
        st.write("**Transcri√ß√£o:**")
        st.write(texto)
        st.write("**An√°lise:**")
        st.write(analise)
        # Salva os arquivos
        salva_transcricao(texto, analise, f'video_{video.name}')

# Aba √Åudio
def transcreve_tab_audio():
    prompt = st.text_input('Prompt (opcional)', key='input_audio')
    audio = st.file_uploader('Adicione um √°udio', type=['opus','mp4','mpeg','wav','mp3','m4a'])
    if audio:
        # salva e converte para WAV
        caminho = PASTA_TEMP / audio.name
        with open(caminho, 'wb') as f:
            f.write(audio.read())
        wav = converter_para_wav(str(caminho))
        texto, analise = transcreve_audio(wav, prompt)
        st.write("**Transcri√ß√£o:**")
        st.write(texto)
        st.write("**An√°lise:**")
        st.write(analise)
        # Salva os arquivos
        salva_transcricao(texto, analise, f'audio_{audio.name}')

# Aba Texto
def transcreve_tab_texto():
    st.write("Envie um arquivo de texto com a transcri√ß√£o para an√°lise")
    arquivo_texto = st.file_uploader('Adicione um arquivo de texto', type=['txt', 'doc', 'docx'])
    if arquivo_texto:
        try:
            if arquivo_texto.type == 'text/plain':
                # Para arquivos .txt
                texto = arquivo_texto.getvalue().decode('utf-8')
            else:
                # Para arquivos Word (.doc, .docx)
                import docx2txt
                texto = docx2txt.process(arquivo_texto)
            
            analise = processa_transcricao_chatgpt(texto)
            st.write("**Texto Original:**")
            st.write(texto)
            st.write("**An√°lise:**")
            st.write(analise)
            # Salva os arquivos
            salva_transcricao(texto, analise, f'texto_{arquivo_texto.name}')
        except Exception as e:
            st.error(f"Erro ao processar o arquivo: {str(e)}")

# Fun√ß√£o principal
def main():
    st.header('üéôÔ∏è Assistente de Organiza√ß√£o üéôÔ∏è')
    st.markdown('Grava√ß√£o, Transcri√ß√£o e Organiza√ß√£o.')
    st.markdown('Reuni√µes, Palestras, Atendimentos e Outros.')
    abas = st.tabs(['Microfone', 'V√≠deo', '√Åudio', 'Texto'])
    with abas[0]:
        transcreve_tab_mic()
    with abas[1]:
        transcreve_tab_video()
    with abas[2]:
        transcreve_tab_audio()
    with abas[3]:
        transcreve_tab_texto()

if __name__ == '__main__':
    main()
